//
// Tests the Base/Cap calculations
//

#include <cstdlib>
#include <cstdio>
#include <TpkC.h>

static int testCap(double elDeg, double expectedCapDeg) {
    double baseDeg, capDeg;
    TpkC::calculateBaseAndCap(0.0, elDeg, baseDeg, capDeg);

    if (std::isnan(baseDeg) || std::isnan(capDeg)) {
        printf("testCap failed (NaN): el=%g, cap=%g (expected cap: %g)\n", elDeg, capDeg, expectedCapDeg);
        return 1;
    }

    if (abs(capDeg - expectedCapDeg) > 0.1) {
        printf("testCap failed: el=%g, cap=%g (expected cap: %g)\n", elDeg, capDeg, expectedCapDeg);
        return 1;
    }
    return 0;
}

static int testBaseCap(double elDeg, double azDeg, double expectedBaseDeg, double expectedCapDeg) {
    double baseDeg, capDeg;
    TpkC::calculateBaseAndCap(azDeg, elDeg, baseDeg, capDeg);
    if (std::isnan(baseDeg) || std::isnan(capDeg)) {
        printf("testCap failed (NaN): el=%g, cap=%g (expected cap: %g)\n", elDeg, capDeg, expectedCapDeg);
        return 1;
    }

//    printf("XXX: el=%g, az=%g, base=%g, cap=%g\n", elDeg, azDeg, baseDeg, capDeg);
    int status = 0;

    // Note: The values in the table are rounded and may have used fewer decimal places in the calculations
    if (abs(baseDeg - expectedBaseDeg) > 0.2) {
        printf("testBaseCap failed: el=%g, az=%g, base=%g (expected base: %g)\n", elDeg, azDeg, baseDeg,
               expectedBaseDeg);
        status = 1;
    }
    if (abs(capDeg - expectedCapDeg) > 0.2) {
        printf("testBaseCap failed: el=%g, az=%g, cap=%g (expected cap: %g)\n", elDeg, azDeg, capDeg, expectedCapDeg);
        status = 1;
    }
    return status;
}

// Copied from Excel table BaseCap.xlxs
static double table[][15] = {
        //       El      Base     Cap	                                      P1a    P1e        P2a	    P2e	     P1b	    P1c	        P2b	        P2c
        {25,   42.6,  180,   -32.5, -57.3, -30.8, 60, 25,   61, 26,   102.6, 180,   103.6, 164.1, 162.6},
        {26,   20.3,  164.1, -31.5, -55.1, -29.9, 60, 26,   61, 27,   80.3,  164.1, 81.3,  157.6, 140.3},
        {27,   -0.4,  157.6, -30.5, -53,   -29.1, 60, 27,   61, 28,   59.6,  157.6, 60.6,  152.6, 119.6},
        {28,   -17.5, 152.6, -29.5, -50.9, -28.2, 60, 28,   61, 29,   42.5,  152.6, 43.5,  148.5, 102.5},
        {29,   -29.1, 148.5, -28.5, -48.9, -27.3, 60, 29,   61, 30,   30.9,  148.5, 31.9,  144.8, 90.9},
        {30,   -36.6, 144.8, -27.5, -46.8, -26.5, 60, 30,   61, 31,   23.4,  144.8, 24.4,  141.5, 83.4},
        {31,   -41.2, 141.5, -26.5, -44.8, -25.6, 60, 31,   61, 32,   18.8,  141.5, 19.8,  138.5, 78.8},
        {32,   -43.7, 138.5, -25.5, -42.9, -24.7, 60, 32,   61, 33,   16.3,  138.5, 17.3,  135.7, 76.3},
        {33,   -44.8, 135.7, -24.5, -41,   -23.8, 60, 33,   61, 34,   15.2,  135.7, 16.2,  133,   75.2},
        {34,   -44.9, 133,   -23.5, -39.1, -22.8, 60, 34,   61, 35,   15.1,  133,   16.1,  130.6, 75.1},
        {35,   -44.1, 130.6, -22.5, -37.3, -21.9, 60, 35,   61, 36,   15.9,  130.6, 16.9,  128.2, 75.9},
        {36,   -42.4, 128.2, -21.5, -35.4, -21,   60, 36,   61, 37,   17.6,  128.2, 18.6,  125.9, 77.6},
        {37,   -39.9, 125.9, -20.5, -33.6, -20.1, 60, 37,   61, 38,   20.1,  125.9, 21.1,  123.8, 80.1},
        {38,   -36.8, 123.8, -19.5, -31.9, -19.1, 60, 38,   61, 39,   23.2,  123.8, 24.2,  121.7, 83.2},
        {39,   -32.8, 121.7, -18.5, -30.1, -18.2, 60, 39,   61, 40,   27.2,  121.7, 28.2,  119.7, 87.2},
        {40,   -28.1, 119.7, -17.5, -28.4, -17.2, 60, 40,   61, 41,   31.9,  119.7, 32.9,  117.7, 91.9},
        {41,   -22.5, 117.7, -16.5, -26.6, -16.3, 60, 41,   61, 42,   37.5,  117.7, 38.5,  115.8, 97.5},
        {42,   -16.4, 115.8, -15.5, -24.9, -15.3, 60, 42,   61, 43,   43.6,  115.8, 44.6,  114,   103.6},
        {43,   -10,   114,   -14.5, -23.3, -14.3, 60, 43,   61, 44,   50,    114,   51,    112.1, 110},
        {44,   -2.9,  112.1, -13.5, -21.6, -13.4, 60, 44,   61, 45,   57.1,  112.1, 58.1,  110.4, 117.1},
        {45,   3.5,   110.4, -12.5, -20,   -12.4, 60, 45,   61, 46,   63.5,  110.4, 64.5,  108.6, 123.5},
        {46,   10,    108.6, -11.5, -18.3, -11.4, 60, 46,   61, 47,   70,    108.6, 71,    106.9, 130},
        {47,   15.8,  106.9, -10.5, -16.7, -10.4, 60, 47,   61, 48,   75.8,  106.9, 76.8,  105.2, 135.8},
        {48,   21,    105.2, -9.5,  -15,   -9.5,  60, 48,   61, 49,   81,    105.2, 82,    103.6, 141},
        {49,   25.3,  103.6, -8.5,  -13.5, -8.5,  60, 49,   61, 50,   85.3,  103.6, 86.3,  101.9, 145.3},
        {50,   29.4,  101.9, -7.5,  -11.8, -7.5,  60, 50,   61, 51,   89.4,  101.9, 90.4,  100.3, 149.4},
        {51,   32.6,  100.3, -6.5,  -10.2, -6.5,  60, 51,   61, 52,   92.6,  100.3, 93.6,  98.7,  152.6},
        {52,   35.4,  98.7,  -5.5,  -8.7,  -5.5,  60, 52,   61, 53,   95.4,  98.7,  96.4,  97.1,  155.4},
        {53,   37.7,  97.1,  -4.5,  -7.1,  -4.5,  60, 53,   61, 54,   97.7,  97.1,  98.7,  95.5,  157.7},
        {54,   39.6,  95.5,  -3.5,  -5.5,  -3.5,  60, 54,   61, 55,   99.6,  95.5,  100.6, 93.9,  159.6},
        {55,   41.2,  93.9,  -2.5,  -3.9,  -2.5,  60, 55,   61, 56,   101.2, 93.9,  102.2, 92.4,  161.2},
        {56,   42.4,  92.4,  -1.5,  -2.4,  -1.5,  60, 56,   61, 57,   102.4, 92.4,  103.4, 90.8,  162.4},
        {57,   43.4,  90.8,  -0.5,  -0.8,  -0.5,  60, 57,   61, 58,   103.4, 90.8,  104.4, 89.2,  163.4},
        {57.5, 43.8,  90,    0,     0,     0,     60, 57.5, 61, 58.5, 103.8, 90,    104.8, 88.4,  163.8},
        {58,   44.1,  89.2,  0.5,   0.8,   0.5,   60, 58,   61, 59,   104.1, 89.2,  105.1, 87.6,  164.1},
        {59,   44.6,  87.6,  1.5,   2.4,   1.5,   60, 59,   61, 60,   104.6, 87.6,  105.6, 86.1,  164.6},
        {60,   44.9,  86.1,  2.5,   3.9,   2.5,   60, 60,   61, 61,   104.9, 86.1,  105.9, 84.5,  164.9},
        {61,   45,    84.5,  3.5,   5.5,   3.5,   60, 61,   61, 62,   105,   84.5,  106,   82.9,  165},
        {62,   44.9,  82.9,  4.5,   7.1,   4.5,   60, 62,   61, 63,   104.9, 82.9,  105.9, 81.3,  164.9},
        {63,   44.7,  81.3,  5.5,   8.7,   5.5,   60, 63,   61, 64,   104.7, 81.3,  105.7, 79.7,  164.7},
        {64,   44.3,  79.7,  6.5,   10.2,  6.5,   60, 64,   61, 65,   104.3, 79.7,  105.3, 78.1,  164.3},
        {65,   43.8,  78.1,  7.5,   11.8,  7.5,   60, 65,   61, 66,   103.8, 78.1,  104.8, 76.4,  163.8},
        {66,   43.1,  76.4,  8.5,   13.5,  8.5,   60, 66,   61, 67,   103.1, 76.4,  104.1, 74.8,  163.1},
        {67,   42.3,  74.8,  9.5,   15,    9.5,   60, 67,   61, 68,   102.3, 74.8,  103.3, 73.1,  162.3},
        {68,   41.3,  73.1,  10.5,  16.7,  10.4,  60, 68,   61, 69,   101.3, 73.1,  102.3, 71.4,  161.3},
        {69,   40.2,  71.4,  11.5,  18.3,  11.4,  60, 69,   61, 70,   100.2, 71.4,  101.2, 69.6,  160.2},
        {70,   38.9,  69.6,  12.5,  20,    12.4,  60, 70,   61, 71,   98.9,  69.6,  99.9,  67.9,  158.9},
        {71,   37.5,  67.9,  13.5,  21.6,  13.4,  60, 71,   61, 72,   97.5,  67.9,  98.5,  66,    157.5},
        {72,   35.9,  66,    14.5,  23.3,  14.3,  60, 72,   61, 73,   95.9,  66,    96.9,  64.2,  155.9},
        {73,   34.3,  64.2,  15.5,  24.9,  15.3,  60, 73,   61, 74,   94.3,  64.2,  95.3,  62.3,  154.3},
        {74,   32.5,  62.3,  16.5,  26.6,  16.3,  60, 74,   61, 75,   92.5,  62.3,  93.5,  60.3,  152.5},
        {75,   30.5,  60.3,  17.5,  28.4,  17.2,  60, 75,   61, 76,   90.5,  60.3,  91.5,  58.3,  150.5},
        {76,   28.4,  58.3,  18.5,  30.1,  18.2,  60, 76,   61, 77,   88.4,  58.3,  89.4,  56.2,  148.4},
        {77,   26.3,  56.2,  19.5,  31.9,  19.1,  60, 77,   61, 78,   86.3,  56.2,  87.3,  54.1,  146.3},
        {78,   24.1,  54.1,  20.5,  33.6,  20.1,  60, 78,   61, 79,   84.1,  54.1,  85.1,  51.8,  144.1},
        {79,   21.7,  51.8,  21.5,  35.4,  21,    60, 79,   61, 80,   81.7,  51.8,  82.7,  49.4,  141.7},
        {80,   19.3,  49.4,  22.5,  37.3,  21.9,  60, 80,   61, 81,   79.3,  49.4,  80.3,  47,    139.3},
        {81,   16.9,  47,    23.5,  39.1,  22.8,  60, 81,   61, 82,   76.9,  47,    77.9,  44.3,  136.9},
        {82,   14.5,  44.3,  24.5,  41,    23.8,  60, 82,   61, 83,   74.5,  44.3,  75.5,  41.5,  134.5},
        {83,   12.1,  41.5,  25.5,  42.9,  24.7,  60, 83,   61, 84,   72.1,  41.5,  73.1,  38.5,  132.1},
        {84,   9.8,   38.5,  26.5,  44.8,  25.6,  60, 84,   61, 85,   69.8,  38.5,  70.8,  35.2,  129.8},
        {85,   7.6,   35.2,  27.5,  46.8,  26.5,  60, 85,   61, 86,   67.6,  35.2,  68.6,  31.5,  127.6},
        {86,   5.5,   31.5,  28.5,  48.9,  27.3,  60, 86,   61, 87,   65.5,  31.5,  66.5,  27.4,  125.5},
        {87,   3.6,   27.4,  29.5,  50.9,  28.2,  60, 87,   61, 88,   63.6,  27.4,  64.6,  22.4,  123.6},
        {88,   2,     22.4,  30.5,  53,    29.1,  60, 88,   61, 89,   62,    22.4,  63,    15.9,  122},
        {89,   0.7,   15.9,  31.5,  55.1,  29.9,  60, 89,   61, 90,   60.7,  15.9,  61.7,  0,     120.7},
//        {90,	0,	0,	32.5,	57.3,	30.8,	60,	90,	61,	91,	60,	0,	61,	#NUM!	}
};

static int numRows = sizeof table / sizeof table[0];
static int el1Index = 0;
//static int azAr[] = {0, 60, 61};
static int azAr[] = {0, 60};
static int numAzs = sizeof azAr / sizeof(int);
//static int baseIndexes[] = {1, 10, 12};
//static int capIndexes[] = {2, 11, 13};
static int baseIndexes[] = {1, 10};
static int capIndexes[] = {2, 11};

static int testBasedOnTable() {
    int status = 0;
    for (int row = 0; row < numRows; row++) {
        for (int i = 0; i < numAzs; i++) {
            double el = table[row][el1Index];
            double az = azAr[i];
            double expectedBase = table[row][baseIndexes[i]];
            double expectedCap = table[row][capIndexes[i]];
            status |= testBaseCap(el, az, expectedBase, expectedCap);
        }
    }
    return status;
}

static int testKnownCapValues() {
    // Note: For el: For visible objects, it is an angle between 0° and 90°
    int status = 0;
    status |= testCap(25.0, 180.0);
    status |= testCap(26.0, 164.1);
    status |= testCap(27.0, 157.6);
    status |= testCap(59.0, 87.6);
    status |= testCap(60.0, 86.05);
    status |= testCap(90.0, 0);
    return status;
}

int main() {
    int status = 0;
    status |= testKnownCapValues();
    status |= testBasedOnTable();
    return status;
}
